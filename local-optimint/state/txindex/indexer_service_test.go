package txindex_test

import (
	"testing"
	"time"

	"github.com/stretchr/testify/require"
	abci "github.com/tendermint/tendermint/abci/types"
	"github.com/tendermint/tendermint/libs/log"
	"github.com/tendermint/tendermint/types"

	blockidxkv "github.com/celestiaorg/optimint/state/indexer/block/kv"
	"github.com/celestiaorg/optimint/state/txindex"
	"github.com/celestiaorg/optimint/state/txindex/kv"
	"github.com/celestiaorg/optimint/store"
)

func TestIndexerServiceIndexesBlocks(t *testing.T) {
	// event bus
	eventBus := types.NewEventBus()
	eventBus.SetLogger(log.TestingLogger())
	err := eventBus.Start()
	require.NoError(t, err)
	t.Cleanup(func() {
		if err := eventBus.Stop(); err != nil {
			t.Error(err)
		}
	})

	// tx indexer
	kvStore := store.NewDefaultInMemoryKVStore()
	txIndexer := kv.NewTxIndex(kvStore)
	blockIndexer := blockidxkv.New(store.NewPrefixKV(kvStore, []byte("block_events")))

	service := txindex.NewIndexerService(txIndexer, blockIndexer, eventBus)
	service.SetLogger(log.TestingLogger())
	err = service.Start()
	require.NoError(t, err)
	t.Cleanup(func() {
		if err := service.Stop(); err != nil {
			t.Error(err)
		}
	})

	// publish block with txs
	err = eventBus.PublishEventNewBlockHeader(types.EventDataNewBlockHeader{
		Header: types.Header{Height: 1},
		NumTxs: int64(2),
	})
	require.NoError(t, err)
	txResult1 := &abci.TxResult{
		Height: 1,
		Index:  uint32(0),
		Tx:     types.Tx("foo"),
		Result: abci.ResponseDeliverTx{Code: 0},
	}
	err = eventBus.PublishEventTx(types.EventDataTx{TxResult: *txResult1})
	require.NoError(t, err)
	txResult2 := &abci.TxResult{
		Height: 1,
		Index:  uint32(1),
		Tx:     types.Tx("bar"),
		Result: abci.ResponseDeliverTx{Code: 0},
	}
	err = eventBus.PublishEventTx(types.EventDataTx{TxResult: *txResult2})
	require.NoError(t, err)
	txResult3 := &abci.TxResult{
		Height: 7,
		Index:  0x0,
		Tx:     []uint8{0xa, 0xf4, 0x2, 0xa, 0xc0, 0x2, 0xa, 0x1f, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x78, 0x12, 0x9c, 0x2, 0xa, 0xa0, 0x1, 0xa, 0x1a, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x54, 0x78, 0x12, 0x81, 0x1, 0x8, 0x2, 0x12, 0x2, 0x32, 0x30, 0x18, 0xa0, 0x8d, 0x6, 0x22, 0x2a, 0x30, 0x78, 0x30, 0x30, 0x31, 0x46, 0x62, 0x37, 0x37, 0x34, 0x31, 0x37, 0x33, 0x44, 0x32, 0x64, 0x36, 0x34, 0x31, 0x39, 0x30, 0x42, 0x31, 0x39, 0x31, 0x41, 0x44, 0x35, 0x36, 0x38, 0x33, 0x36, 0x63, 0x64, 0x32, 0x35, 0x30, 0x31, 0x62, 0x61, 0x34, 0x42, 0x2a, 0x1, 0x31, 0x3a, 0x2, 0x46, 0x74, 0x42, 0x20, 0x1d, 0x91, 0x97, 0x62, 0x50, 0x21, 0xf5, 0x85, 0xac, 0x73, 0xa, 0x10, 0xb8, 0x88, 0x60, 0x9b, 0x72, 0x49, 0x1e, 0x6a, 0x5f, 0x97, 0x66, 0xda, 0xc7, 0x60, 0x24, 0x1a, 0x61, 0xca, 0x63, 0xe8, 0x4a, 0x20, 0x27, 0xd2, 0xaf, 0xa0, 0x97, 0x53, 0xe4, 0x6b, 0x2a, 0x2b, 0xb, 0x8d, 0xec, 0x1f, 0x3a, 0x69, 0x13, 0xde, 0xff, 0xf5, 0x8d, 0x46, 0x81, 0x9, 0x0, 0xaf, 0xea, 0x52, 0xf7, 0x2c, 0xf0, 0xb3, 0x11, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x59, 0x40, 0x1a, 0x42, 0x30, 0x78, 0x36, 0x63, 0x62, 0x65, 0x37, 0x37, 0x39, 0x33, 0x64, 0x66, 0x61, 0x38, 0x63, 0x30, 0x39, 0x66, 0x33, 0x61, 0x35, 0x63, 0x31, 0x64, 0x36, 0x38, 0x63, 0x39, 0x64, 0x31, 0x62, 0x38, 0x61, 0x37, 0x33, 0x34, 0x63, 0x38, 0x64, 0x33, 0x63, 0x30, 0x64, 0x63, 0x63, 0x35, 0x63, 0x61, 0x38, 0x39, 0x63, 0x35, 0x38, 0x62, 0x35, 0x35, 0x62, 0x63, 0x61, 0x39, 0x34, 0x62, 0x34, 0x32, 0x39, 0x63, 0x22, 0x2a, 0x30, 0x78, 0x31, 0x36, 0x63, 0x31, 0x35, 0x38, 0x35, 0x37, 0x44, 0x44, 0x43, 0x33, 0x61, 0x35, 0x31, 0x65, 0x46, 0x41, 0x44, 0x36, 0x36, 0x39, 0x36, 0x37, 0x42, 0x35, 0x37, 0x39, 0x41, 0x36, 0x35, 0x37, 0x33, 0x43, 0x39, 0x35, 0x35, 0x35, 0x42, 0x36, 0xfa, 0x3f, 0x2e, 0xa, 0x2c, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x78, 0x12, 0x1a, 0x12, 0x18, 0xa, 0x12, 0xa, 0x7, 0x61, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x12, 0x7, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x10, 0xa0, 0x8d, 0x6},
		Result: abci.ResponseDeliverTx{
			Code:      0x1,
			Data:      []uint8(nil),
			Log:       "internal",
			Info:      "",
			GasWanted: 0,
			GasUsed:   85898,
			Events:    []abci.Event(nil),
			Codespace: "undefined",
		},
	}
	err = eventBus.PublishEventTx(types.EventDataTx{TxResult: *txResult3})
	require.NoError(t, err)

	time.Sleep(100 * time.Millisecond)

	res, err := txIndexer.Get(types.Tx("foo").Hash())
	require.NoError(t, err)
	require.Equal(t, txResult1, res)

	ok, err := blockIndexer.Has(1)
	require.NoError(t, err)
	require.True(t, ok)

	res, err = txIndexer.Get(types.Tx("bar").Hash())
	require.NoError(t, err)
	require.Equal(t, txResult2, res)
}
